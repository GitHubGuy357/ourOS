start5(): Running:    simple3
start5(): Pagers:     1
          Mappings:   3
          Pages:      3
          Frames:     3
          Children:   1
          Iterations: 1
          Priority:   5
 <- vmInitReal(): Created fault_mbox [809] with 1 pagers
 <- vmInitReal(): Using Disk[1], [sectSize=512 numSects=16 numTracks=32]
 <- vmInitReal(): Forking Pager[0] @ pid[10]
start5(): after call to VmInit, status = 0

 <- p1_fork(): VM is initialized, forking pid[11]
 <- p1_switch(): VM is initialized, switching from old[9] new[10]
 <- p1_switch(): VM is initialized, switching from old[10] new[8]
 <- p1_switch(): VM is initialized, switching from old[8] new[11]

Child(11): starting
 <- FaultHandler(): start
 <- FaultHandler(): Sending fault...pid=[11] offset=[0] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- Pager(): Fault Received...from pid[11.11] @ offset[0.0], reply_mboxID[860.860] pager_buf[0] 
 <- Pager(): Searching for frame... frame [0] found!
 <- Pager(): Locking frame [0]
 <- Pager(): calling MmuMap with (tag=[0],page=[0],FrameTable[frame].frame=[0], access=[3])
 <- Pager(): Setting frame [0] as clean, unmapping temp pager frame.
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0.0.0] to frame[0] by new pid[11]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0.0.0] from frame[0] by old pid[11]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0.0.0] to frame[0] by new pid[11]
 <- FaultHandler(): After Recv on FaultTable replyMbox by pid[11], reply_buff = [0]
 <- FaultHandler(): Unlocking frame [0]
 <- FaultHandler(): end
 <- FaultHandler(): start
 <- FaultHandler(): Sending fault...pid=[11] offset=[1] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0.0.0] from frame[0] by old pid[11]
 <- Pager(): Fault Received...from pid[11.11] @ offset[1.1], reply_mboxID[860.860] pager_buf[0] 
 <- Pager(): Searching for frame... frame [1] found!
 <- Pager(): Locking frame [1]
 <- Pager(): calling MmuMap with (tag=[0],page=[0],FrameTable[frame].frame=[1], access=[3])
 <- Pager(): Setting frame [1] as clean, unmapping temp pager frame.
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0.0.0] to frame[0] by new pid[11]
 <- p1_switch(): Mapping page=[1.1.1] to frame[1] by new pid[11]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0.0.0] from frame[0] by old pid[11]
 <- p1_switch(): Unmapping page=[1.1.1] from frame[1] by old pid[11]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0.0.0] to frame[0] by new pid[11]
 <- p1_switch(): Mapping page=[1.1.1] to frame[1] by new pid[11]
 <- FaultHandler(): After Recv on FaultTable replyMbox by pid[11], reply_buff = [1]
 <- FaultHandler(): Unlocking frame [1]
 <- FaultHandler(): end
 <- FaultHandler(): start
 <- FaultHandler(): Sending fault...pid=[11] offset=[2] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0.0.0] from frame[0] by old pid[11]
 <- p1_switch(): Unmapping page=[1.1.1] from frame[1] by old pid[11]
 <- Pager(): Fault Received...from pid[11.11] @ offset[2.2], reply_mboxID[860.860] pager_buf[0] 
 <- Pager(): Searching for frame... frame [2] found!
 <- Pager(): Locking frame [2]
 <- Pager(): calling MmuMap with (tag=[0],page=[0],FrameTable[frame].frame=[2], access=[3])
 <- Pager(): Setting frame [2] as clean, unmapping temp pager frame.
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0.0.0] to frame[0] by new pid[11]
 <- p1_switch(): Mapping page=[1.1.1] to frame[1] by new pid[11]
 <- p1_switch(): Mapping page=[2.2.2] to frame[2] by new pid[11]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0.0.0] from frame[0] by old pid[11]
 <- p1_switch(): Unmapping page=[1.1.1] from frame[1] by old pid[11]
 <- p1_switch(): Unmapping page=[2.2.2] from frame[2] by old pid[11]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0.0.0] to frame[0] by new pid[11]
 <- p1_switch(): Mapping page=[1.1.1] to frame[1] by new pid[11]
 <- p1_switch(): Mapping page=[2.2.2] to frame[2] by new pid[11]
 <- FaultHandler(): After Recv on FaultTable replyMbox by pid[11], reply_buff = [2]
 <- FaultHandler(): Unlocking frame [2]
 <- FaultHandler(): end
 <- p1_switch(): VM is initialized, switching from old[11] new[9]
 <- p1_switch(): Unmapping page=[0.0.0] from frame[0] by old pid[11]
 <- p1_switch(): Unmapping page=[1.1.1] from frame[1] by old pid[11]
 <- p1_switch(): Unmapping page=[2.2.2] from frame[2] by old pid[11]
 <- p1_switch(): VM is initialized, switching from old[9] new[11]
 <- p1_switch(): Mapping page=[0.0.0] to frame[0] by new pid[11]
 <- p1_switch(): Mapping page=[1.1.1] to frame[1] by new pid[11]
 <- p1_switch(): Mapping page=[2.2.2] to frame[2] by new pid[11]
Child(11): terminating

 <- p1_quit(): VM is VMInitialized, and pid[11] is quiting
 <- p1_quit(): Unmapping page=[0] from frame[0]
 <- p1_quit(): Unmapping page=[1] from frame[1]
 <- p1_quit(): Unmapping page=[2] from frame[2]
 <- p1_switch(): VM is initialized, switching from old[0] new[9]
start5(): done
 <- vmDestroy(): start
 <- vmDestroyReal(): start
 <- vmDestroyReal(): zapping pager[0] pid[10]...
 <- p1_switch(): VM is initialized, switching from old[9] new[10]
 <- p1_quit(): VM is VMInitialized, and pid[10] is quiting
 <- p1_switch(): VM is initialized, switching from old[0] new[9]
 <- vmDestroyReal(): zapping pager[1] pid[-1]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[0]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[1]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[2]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[3]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[4]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[5]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[6]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[7]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[8]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[9]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[10]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[11]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[12]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[13]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[14]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[15]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[16]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[17]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[18]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[19]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[20]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[21]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[22]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[23]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[24]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[25]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[26]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[27]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[28]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[29]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[30]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[31]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[32]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[33]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[34]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[35]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[36]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[37]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[38]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[39]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[40]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[41]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[42]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[43]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[44]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[45]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[46]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[47]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[48]...
 <- vmDestroyReal(): releasing Fault Reply Mailboxes[49]...
 <- vmDestroyReal(): releasing Fault Mailbox[809]...
VmStats
pages:          3
frames:         3
diskBlocks:     64
freeFrames:     3
freeDiskBlocks: 64
switches:       14
faults:         3
new:            3
pageIns:        0
pageOuts:       0
replaced:       0
 <- vmDestroyReal(): end
 <- vmDestroy(): end
 <- p1_quit(): VM is VM NOT initialized, and pid[9] is quiting
 <- p1_quit(): VM is VM NOT initialized, and pid[8] is quiting
 <- p1_quit(): VM is VM NOT initialized, and pid[6] is quiting
 <- p1_quit(): VM is VM NOT initialized, and pid[7] is quiting
 <- p1_quit(): VM is VM NOT initialized, and pid[5] is quiting
 <- p1_quit(): VM is VM NOT initialized, and pid[4] is quiting
 <- p1_quit(): VM is VM NOT initialized, and pid[3] is quiting
All processes completed.
