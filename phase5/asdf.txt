start5(): Running:    simple5
start5(): Pagers:     1
          Mappings:   2
          Pages:      2
          Frames:     1
          Children:   1
          Iterations: 2
          Priority:   5
 <- vmInitReal(): Using Disk[1], [sectSize=512 numSects=16 numTracks=32] MMU_pageSize=[4096]
 <- p1_switch(): VM is initialized, switching from old[9] new[10]
 <- p1_switch(): VM is initialized, switching from old[10] new[8]
 <- p1_switch(): VM is initialized, switching from old[8] new[11]

Child(11): starting

Child(11): iteration 0
Child(11) writing to page 0

 <- FaultHandler(): Sending fault...pid=[11] offset=[0] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- Pager(): Fault Received...from pid[11] offset[0] | reply_mboxID[860] pager_buf[0] 
 <- Pager(): Searching for frame... frame [0] found!
 <- Pager(): Locking frame [0]
 <- Pager(): Mapping temp pager frame=[0] access=[3] P_result = [Everything hunky-dory])
 <- Pager(): Page[0] state is [UNUSED], zeroing out vmRegions frame[0]
 <- Pager(): Setting frame[0] as clean, P_result = [Everything hunky-dory]
 <- Pager(): Unmapping temp pager frame[0], p_result = [Everything hunky-dory]
 <- Pager(): Fault Handled for pid[11]: frame[0] state[F_USED] sending to FaultMsg replyMbox[860]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0] to frame[0] by new pid[11]... S_result = [Everything hunky-dory]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0] from frame[0] by old pid[11]... S_result = [Everything hunky-dory]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0] to frame[0] by new pid[11]... S_result = [Everything hunky-dory]
 <- FaultHandler(): Unlocking frame [0]
Child(11) writing to page 1

 <- FaultHandler(): Sending fault...pid=[11] offset=[1] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0] from frame[0] by old pid[11]... S_result = [Everything hunky-dory]
 <- Pager(): Fault Received...from pid[11] offset[1] | reply_mboxID[860] pager_buf[0] 
 <- Pager(): Searching for frame... frame not found...
 <- Pager(): Searching frame [0] state [UNLOCKED] reference bit = [1] dirty bit = [2]
 <- Pager(): Setting frame[0] as unreferenced...
 <- Pager(): Searching frame [0] state [UNLOCKED] reference bit = [0] dirty bit = [2]
 <- Pager(): frame[0] found, stealing from pid[11] page[0] 
 <- Pager(): page[0] is dirty, notify previous process [11] its frame is being written to disk...
 <- Pager(): Locking frame [0]
 <- Pager(): Mapping temp pager frame=[0] access=[3] P_result = [Everything hunky-dory])
 <- Pager(): Page[1] state is [UNUSED], zeroing out vmRegions frame[0]
 <- Pager(): Setting frame[0] as clean, P_result = [Everything hunky-dory]
 <- Pager(): Unmapping temp pager frame[0], p_result = [Everything hunky-dory]
 <- Pager(): Fault Handled for pid[11]: frame[0] state[F_USED] sending to FaultMsg replyMbox[860]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[1] to frame[0] by new pid[11]... S_result = [Everything hunky-dory]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[1] from frame[0] by old pid[11]... S_result = [Everything hunky-dory]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[1] to frame[0] by new pid[11]... S_result = [Everything hunky-dory]
 <- FaultHandler(): Unlocking frame [0]

Child(11): iteration 1
Child(11) writing to page 0

 <- FaultHandler(): Sending fault...pid=[11] offset=[0] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[1] from frame[0] by old pid[11]... S_result = [Everything hunky-dory]
 <- Pager(): Fault Received...from pid[11] offset[0] | reply_mboxID[860] pager_buf[0] 
 <- Pager(): Searching for frame... frame not found...
 <- Pager(): Searching frame [0] state [UNLOCKED] reference bit = [1] dirty bit = [2]
 <- Pager(): Setting frame[0] as unreferenced...
 <- Pager(): Searching frame [0] state [UNLOCKED] reference bit = [0] dirty bit = [2]
 <- Pager(): frame[0] found, stealing from pid[11] page[1] 
 <- Pager(): page[1] is dirty, notify previous process [11] its frame is being written to disk...
 <- Pager(): Locking frame [0]
 <- Pager(): Mapping temp pager frame=[0] access=[3] P_result = [Everything hunky-dory])
 <- Pager(): Frame [0] found is in disk...copy disk page to frame.
 <- Pager(): Page[0] state is [INDISK] NOT zeroing out vmRegions frame [0]
 <- Pager(): Setting frame[0] as clean, P_result = [Everything hunky-dory]
 <- Pager(): Unmapping temp pager frame[0], p_result = [Everything hunky-dory]
 <- Pager(): Fault Handled for pid[11]: frame[0] state[F_USED] sending to FaultMsg replyMbox[860]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- FaultHandler(): Unlocking frame [0]

 <- FaultHandler(): Sending fault...pid=[11] offset=[0] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- Pager(): Fault Received...from pid[11] offset[0] | reply_mboxID[860] pager_buf[0] 
 <- Pager(): Searching for frame... frame not found...
 <- Pager(): Searching frame [0] state [UNLOCKED] reference bit = [0] dirty bit = [0]
 <- Pager(): frame[0] found, stealing from pid[11] page[0] 
 <- Pager(): Locking frame [0]
 <- Pager(): Mapping temp pager frame=[0] access=[3] P_result = [Everything hunky-dory])
 <- Pager(): Page[0] state is [INBOTH] NOT zeroing out vmRegions frame [0]
 <- Pager(): Setting frame[0] as clean, P_result = [Everything hunky-dory]
 <- Pager(): Unmapping temp pager frame[0], p_result = [Everything hunky-dory]
 <- Pager(): Fault Handled for pid[11]: frame[0] state[F_USED] sending to FaultMsg replyMbox[860]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0] to frame[0] by new pid[11]... S_result = [Everything hunky-dory]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0] from frame[0] by old pid[11]... S_result = [Everything hunky-dory]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[0] to frame[0] by new pid[11]... S_result = [Everything hunky-dory]
 <- FaultHandler(): Unlocking frame [0]
Child(11) writing to page 1

 <- FaultHandler(): Sending fault...pid=[11] offset=[1] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[0] from frame[0] by old pid[11]... S_result = [Everything hunky-dory]
 <- Pager(): Fault Received...from pid[11] offset[1] | reply_mboxID[860] pager_buf[0] 
 <- Pager(): Searching for frame... frame not found...
 <- Pager(): Searching frame [0] state [UNLOCKED] reference bit = [1] dirty bit = [2]
 <- Pager(): Setting frame[0] as unreferenced...
 <- Pager(): Searching frame [0] state [UNLOCKED] reference bit = [0] dirty bit = [2]
 <- Pager(): frame[0] found, stealing from pid[11] page[0] 
 <- Pager(): page[0] is dirty, notify previous process [11] its frame is being written to disk...
 <- Pager(): Locking frame [0]
 <- Pager(): Mapping temp pager frame=[0] access=[3] P_result = [Everything hunky-dory])
 <- Pager(): Frame [0] found is in disk...copy disk page to frame.
 <- Pager(): Page[1] state is [INDISK] NOT zeroing out vmRegions frame [0]
 <- Pager(): Setting frame[0] as clean, P_result = [Everything hunky-dory]
 <- Pager(): Unmapping temp pager frame[0], p_result = [Everything hunky-dory]
 <- Pager(): Fault Handled for pid[11]: frame[0] state[F_USED] sending to FaultMsg replyMbox[860]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- FaultHandler(): Unlocking frame [0]

 <- FaultHandler(): Sending fault...pid=[11] offset=[1] to Pager
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- Pager(): Fault Received...from pid[11] offset[1] | reply_mboxID[860] pager_buf[0] 
 <- Pager(): Searching for frame... frame not found...
 <- Pager(): Searching frame [0] state [UNLOCKED] reference bit = [0] dirty bit = [0]
 <- Pager(): frame[0] found, stealing from pid[11] page[1] 
 <- Pager(): Locking frame [0]
 <- Pager(): Mapping temp pager frame=[0] access=[3] P_result = [Everything hunky-dory])
 <- Pager(): Page[1] state is [INBOTH] NOT zeroing out vmRegions frame [0]
 <- Pager(): Setting frame[0] as clean, P_result = [Everything hunky-dory]
 <- Pager(): Unmapping temp pager frame[0], p_result = [Everything hunky-dory]
 <- Pager(): Fault Handled for pid[11]: frame[0] state[F_USED] sending to FaultMsg replyMbox[860]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[1] to frame[0] by new pid[11]... S_result = [Everything hunky-dory]
 <- FaultHandler(): Before Recv on FaultTable replyMbox by pid[11]
 <- p1_switch(): VM is initialized, switching from old[11] new[10]
 <- p1_switch(): Unmapping page=[1] from frame[0] by old pid[11]... S_result = [Everything hunky-dory]
 <- p1_switch(): VM is initialized, switching from old[10] new[11]
 <- p1_switch(): Mapping page=[1] to frame[0] by new pid[11]... S_result = [Everything hunky-dory]
 <- FaultHandler(): Unlocking frame [0]
